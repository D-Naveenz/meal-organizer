//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ObjectControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ObjectControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ObjectControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ObjectControls"",
    ""maps"": [
        {
            ""name"": ""MealComponentsMap"",
            ""id"": ""e4dc833d-9daa-49db-b983-dbfcb7a20452"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""444949f0-ff8f-4c89-953d-9956e4aae42e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2735cf34-6099-493e-92cd-de6e4d2b26e1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053e53e3-c2fb-485e-8512-2c03e7787550"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MealComponentsMap
        m_MealComponentsMap = asset.FindActionMap("MealComponentsMap", throwIfNotFound: true);
        m_MealComponentsMap_Interact = m_MealComponentsMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MealComponentsMap
    private readonly InputActionMap m_MealComponentsMap;
    private List<IMealComponentsMapActions> m_MealComponentsMapActionsCallbackInterfaces = new List<IMealComponentsMapActions>();
    private readonly InputAction m_MealComponentsMap_Interact;
    public struct MealComponentsMapActions
    {
        private @ObjectControls m_Wrapper;
        public MealComponentsMapActions(@ObjectControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_MealComponentsMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_MealComponentsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MealComponentsMapActions set) { return set.Get(); }
        public void AddCallbacks(IMealComponentsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MealComponentsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MealComponentsMapActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IMealComponentsMapActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IMealComponentsMapActions instance)
        {
            if (m_Wrapper.m_MealComponentsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMealComponentsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MealComponentsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MealComponentsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MealComponentsMapActions @MealComponentsMap => new MealComponentsMapActions(this);
    public interface IMealComponentsMapActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
